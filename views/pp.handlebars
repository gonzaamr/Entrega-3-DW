<body> 
    <input type="radio" name="vista" id="inicio" checked>
    <input type="radio" name="vista" id="nueva-partida">
    <input type="radio" name="vista" id="en-curso">
    <input type="radio" name="vista" id="partidas-publicas">
    <input type="radio" name="vista" id="historial">
    <input type="radio" name="vista" id="estadisticas">
    <div class="titulo_pp">
        <h1>Inicio</h1>  
    </div>
    <div class="contenedor_pp categorias"> 
        <label for="nueva-partida" class="boton">
            <span class="box-container"> <!-- Contenedor adicional -->
                <span class="box">
                    <img src="/images/peon.png" class="item" alt="Nueva partida">
                    <span>Jugar</span>
                </span>     
            </span>
        </label>
        <label for="en-curso" class="boton">
            <span class="box-container"> <!-- Contenedor adicional -->
                <span class="box">
                    <img src="/images/reloj-arena.png" class="item" alt="Partidas en curso">
                    <span>Partidas en curso</span>
                </span>  
            </span>
        </label>
        <label for="partidas-publicas" class="boton">
            <span class="box-container"> <!-- Contenedor adicional -->
                <span class="box">
                    <img src="/images/punto-de-partida.png" class="item" alt="Partidas publicas">
                    <span>Invitaciones</span>
                </span>  
            </span>
        </label>
        <label for="historial" class="boton">
            <span class="box-container"> <!-- Contenedor adicional -->
                <span class="box">
                    <img src="/images/reloj.png" class="item" alt="Historial">
                    <span>Historial</span>
                </span>  
            </span>
        </label>
        <label for="estadisticas" class="boton">
            <span class="box-container"> <!-- Contenedor adicional -->
                <span class="box">
                    <img src="/images/estadistica.png" class="item" alt="Estadísticas">
                    <span>Estadísticas</span>
                </span>  
            </span>
        </label>
        <label class="boton">
            <a href="/perfil" class="box">
                <img src="/images/perfil.png" class="item" alt="Perfil"> 
                <span>Perfil</span>
            </a>  
        </label>
    </div> 
    <div class="contenedor_pp detalle partida">
        <label class="boton volver" for="inicio">⬅ Volver</label>
        <h1>Partida</h1>
        <img src="/images/peon.png" class="itemdetalle" alt="Iniciar">
        <button class="iniciar online">Nueva partida online</button> 
        <a href="/partidaLocal" class="iniciar">Nueva partida local</a>
    </div>
    <div class="contenedor_pp detalle curso">
        <label class="boton volver" for="inicio">⬅ Volver</label>
        <h1>Partidas en curso</h1>
        <div class="table-container">
            <table>
                <thead>
                    <tr> 
                        <th>Jugador</th>
                        <th>Movimientos</th>
                        <th>Inicio</th>
                        <th>Entrar</th>
                        <th>Borrar</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="contenedor_pp detalle publica">
        <label class="boton volver" for="inicio">⬅ Volver</label>
        <h1>Invitaciones</h1>
        <div class="partidas">
            <div class="carrousel">
            </div>
        </div>
    </div>
    <div class="contenedor_pp detalle historial">
        <label class="boton volver" for="inicio">⬅ Volver</label>
        <h1>Historial</h1>
        <div class="table-container">
            <table>
                <thead> 
                    <tr>
                        <th>Contrincante</th>
                        <th>Resultado</th>
                        <th>Movimientos</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="contenedor_pp detalle estadisticas">
        <label class="boton volver" for="inicio">⬅ Volver</label>
        <h1>Estadísticas</h1>
        <div class="contenedor-estadisticas">
            <div class="est">
                <h3>Victorias</h3>
                <h1>1</h1>
            </div>  
            <div class="est">
                <h3>Empates</h3>
                <h1>1</h1>
            </div>  
            <div class="est">
                <h3>Derrotas</h3>
                <h1>2</h1>
            </div>  
            <div class="est">
                <h3>Partidas</h3>
                <h1>4</h1>
            </div>  
            <div class="est">
                <h3>Movimientos</h3>
                <h1>239</h1>
            </div>  
            <div class="est">
                <h3>Rango</h3>
                <h1>1427</h1>
            </div>  
        </div>
    </div>
    <script>
        // Función principal para cargar partidas
async function partidas() {
    try {
        const res = await fetch('/api/info-partidas');
        if (!res.ok) {
            throw new Error('Error al obtener las partidas');
        }
        const data = await res.json();
        mostrarPartidas(data.partidas, data.usuarioId);
    } catch (error) {
        console.error('Error al obtener las partidas:', error);
    }
}

// Función para crear nueva partida
async function crearNuevaPartida(colorElegido) {
    try {
        const res = await fetch('/api/crear-partida', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ color: colorElegido })
        });
        if (!res.ok) {
            throw new Error('Error al crear la partida');
        }
        const data = await res.json();
        window.location.href = `/partida?id=${data.partidaId}`;
    } catch (error) {
        console.error('Error al crear la partida:', error);
    }
}

// Configuración del botón para nueva partida online
document.querySelector('.online').addEventListener('click', () => {
    document.querySelector(".partida").textContent = "";

    const contenedorBotones = document.createElement("div");
    contenedorBotones.classList.add("cb");

    const titulo = document.createElement("h2");
    titulo.classList.add("elige-color");
    titulo.textContent = "Elige el color de tus piezas";

    const botonBlanca = document.createElement("button");
    botonBlanca.classList.add("decision", "blanca");
    botonBlanca.textContent = "Blancas";

    const botonNegra = document.createElement("button");
    botonNegra.classList.add("decision", "negra");
    botonNegra.textContent = "Negras";

    const contenedor = document.querySelector(".partida");
    contenedor.appendChild(titulo);
    contenedorBotones.appendChild(botonBlanca);
    contenedorBotones.appendChild(botonNegra);
    contenedor.appendChild(contenedorBotones);

    botonBlanca.addEventListener("click", () => crearNuevaPartida("blanca"));
    botonNegra.addEventListener("click", () => crearNuevaPartida("negra"));
});

// Función para mostrar partidas en la interfaz
function mostrarPartidas(partidas, usuarioId) {
    // Limpiar tablas primero
    document.querySelector('.curso tbody').innerHTML = '';
    document.querySelector('.carrousel').innerHTML = '';
    document.querySelector('.historial tbody').innerHTML = '';

    for (const partida of partidas) {
        let oponente;
        const esJugador1 = partida.jugador1.usuario._id === usuarioId;
        const esJugador2 = partida.jugador2?.usuario?._id === usuarioId;

        if (esJugador1) {
            oponente = partida.jugador2?.usuario?.username || 'Esperando oponente';
        } else {
            oponente = partida.jugador1?.usuario?.username || 'Desconocido';
        }

        const movimientos = partida.Movimientos ? partida.Movimientos.length : '-';
        const fecha = new Date(partida.fechaInicio).toLocaleDateString();

        if (partida.resultado === 'en_curso') {
            const tbody = document.querySelector('.curso tbody');
            const tr = document.createElement('tr');
            
            let botonEliminar = '';
            if (esJugador1) {
                botonEliminar = `<td><button class="borrar" data-id="${partida._id}">Borrar</button></td>`;
            } else if (esJugador2) {
                botonEliminar = `<td><button class="solicitar-eliminar" data-id="${partida._id}">Solicitar Eliminar</button></td>`;
            } else {
                botonEliminar = '<td></td>';
            }

            tr.innerHTML = `
                <td>${oponente}</td>
                <td>${movimientos}</td>
                <td>${fecha}</td>
                <td><button class="jugar" data-id="${partida._id}">Jugar</button></td>
                ${botonEliminar}
            `;
            tbody.appendChild(tr);

        } else if (partida.resultado === 'esperando_oponente' && esJugador2) {
            const carrousel = document.querySelector('.carrousel');
            const card = document.createElement('article');
            card.classList.add('card_pp');
            card.innerHTML = `
                <h2>${oponente}</h2>
                <button class="jugar" data-id="${partida._id}">Jugar</button>
            `;
            carrousel.appendChild(card);

        } else if (['jugador1', 'jugador2', 'empate'].includes(partida.resultado)) {
            const tbody = document.querySelector('.historial tbody');
            const tr = document.createElement('tr');
            const ganador = partida.resultado === 'empate' ? 'Empate' :
               (partida.jugador1.usuario._id === usuarioId && partida.resultado === 'jugador1') || 
               (partida.jugador2?.usuario?._id === usuarioId && partida.resultado === 'jugador2') ? 'Ganaste' : 'Perdiste';
                            
            tr.innerHTML = `
                <td>${oponente}</td>
                <td>${ganador}</td>
                <td>${movimientos}</td>
            `;
            tbody.appendChild(tr);
        }
    }
}

// Función para verificar solicitudes de eliminación
function iniciarVerificacionEliminacion() {
    setInterval(async () => {
        try {
            const res = await fetch('/api/info-partidas');
            if (!res.ok) return;
            
            const data = await res.json();
            const partidas = data.partidas || [];
            
            // Filtrar partidas donde:
            // 1. El usuario es el jugador1 (creador)
            // 2. Hay solicitud pendiente
            // 3. El solicitante NO es el usuario actual (es decir, es el jugador2)
            const partidasConSolicitud = partidas.filter(p => 
                p.jugador1.usuario._id === data.usuarioId && 
                p.solicitudEliminacion?.estado === 'pendiente' &&
                p.solicitudEliminacion.solicitante !== data.usuarioId
            );

            for (const partida of partidasConSolicitud) {
                const oponente = partida.jugador2?.usuario?.username || 'Oponente';
                if (confirm(`${oponente} solicita eliminar la partida. ¿Aceptas?`)) {
                    await fetch(`/api/partida/${partida._id}/responder-eliminacion`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ aceptar: true })
                    });
                    alert('Partida eliminada por acuerdo mutuo');
                    window.location.reload();
                } else {
                    await fetch(`/api/partida/${partida._id}/responder-eliminacion`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ aceptar: false })
                    });
                }
            }
        } catch (error) {
            console.error('Error verificando eliminación:', error);
        }
    }, 10000);
}

// Manejador de eventos global para botones
document.addEventListener('click', async function(event) {
    const partidaId = event.target.getAttribute('data-id');
    if (!partidaId) return;
    
    // Botón Jugar
    if (event.target.classList.contains('jugar')) {
        try {
            const res = await fetch(`/api/partida/${partidaId}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ resultado: 'en_curso' })
            });
            if (!res.ok) throw new Error('Error al actualizar partida');
            window.location.href = `/partida?id=${partidaId}`;
        } catch (error) {
            alert(error.message || 'Error al comenzar partida');
        }
    }
    
    // Botón Borrar (jugador1)
    else if (event.target.classList.contains('borrar')) {
        if (!confirm('¿Eliminar esta partida permanentemente?')) return;
        
        try {
            const res = await fetch(`/api/borrar-partida/${partidaId}`, {
                method: 'DELETE'
            });
            if (!res.ok) throw new Error('Error al eliminar partida');
            event.target.closest('tr').remove();
            alert('Partida eliminada');
        } catch (error) {
            alert(error.message || 'Error al eliminar partida');
        }
    }
    
    // Botón Solicitar Eliminar (jugador2)
    else if (event.target.classList.contains('solicitar-eliminar')) {
        if (!confirm('¿Solicitar eliminación de esta partida? El creador deberá aceptar.')) return;
        
        try {
            const res = await fetch(`/api/partida/${partidaId}/solicitar-eliminacion`, {
                method: 'POST'
            });
            if (!res.ok) throw new Error('Error al enviar solicitud');
            alert('Solicitud enviada. Esperando respuesta del creador.');
        } catch (error) {
            alert(error.message || 'Error al solicitar eliminación');
        }
    }
});

// Inicialización cuando la página carga
document.addEventListener('DOMContentLoaded', () => {
    partidas();
    iniciarVerificacionEliminacion();
});
    </script>
</body>